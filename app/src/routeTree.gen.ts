/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WalletconnectImport } from './routes/wallet_connect'
import { Route as ExperimentalauthorizeKeyImport } from './routes/experimental_authorizeKey'

// Create/Update Routes

const WalletconnectRoute = WalletconnectImport.update({
  id: '/wallet_connect',
  path: '/wallet_connect',
  getParentRoute: () => rootRoute,
} as any)

const ExperimentalauthorizeKeyRoute = ExperimentalauthorizeKeyImport.update({
  id: '/experimental_authorizeKey',
  path: '/experimental_authorizeKey',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/experimental_authorizeKey': {
      id: '/experimental_authorizeKey'
      path: '/experimental_authorizeKey'
      fullPath: '/experimental_authorizeKey'
      preLoaderRoute: typeof ExperimentalauthorizeKeyImport
      parentRoute: typeof rootRoute
    }
    '/wallet_connect': {
      id: '/wallet_connect'
      path: '/wallet_connect'
      fullPath: '/wallet_connect'
      preLoaderRoute: typeof WalletconnectImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/experimental_authorizeKey': typeof ExperimentalauthorizeKeyRoute
  '/wallet_connect': typeof WalletconnectRoute
}

export interface FileRoutesByTo {
  '/experimental_authorizeKey': typeof ExperimentalauthorizeKeyRoute
  '/wallet_connect': typeof WalletconnectRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/experimental_authorizeKey': typeof ExperimentalauthorizeKeyRoute
  '/wallet_connect': typeof WalletconnectRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/experimental_authorizeKey' | '/wallet_connect'
  fileRoutesByTo: FileRoutesByTo
  to: '/experimental_authorizeKey' | '/wallet_connect'
  id: '__root__' | '/experimental_authorizeKey' | '/wallet_connect'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ExperimentalauthorizeKeyRoute: typeof ExperimentalauthorizeKeyRoute
  WalletconnectRoute: typeof WalletconnectRoute
}

const rootRouteChildren: RootRouteChildren = {
  ExperimentalauthorizeKeyRoute: ExperimentalauthorizeKeyRoute,
  WalletconnectRoute: WalletconnectRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/experimental_authorizeKey",
        "/wallet_connect"
      ]
    },
    "/experimental_authorizeKey": {
      "filePath": "experimental_authorizeKey.tsx"
    },
    "/wallet_connect": {
      "filePath": "wallet_connect.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
