{"version":3,"file":"WebAuthN.js","sourceRoot":"","sources":["../src/WebAuthN.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'react-native'\nimport ExpoWebAuthN from './ExpoWebAuthN'\nimport * as assertion from './internal/assertion'\nimport * as credential from './internal/credential'\nimport { logger } from './internal/logger'\nimport { WebAuthnError } from './internal/types'\nimport { bufferSourceToBase64 } from './internal/utils'\nimport type {\n  AuthenticatorAssertionResponse,\n  AuthenticatorAttestationResponse,\n  CredentialCreationOptions as WebAuthnCredentialCreationOptions,\n  CredentialRequestOptions as WebAuthnCredentialRequestOptions,\n  PublicKeyCredential,\n} from './internal/webauthn'\n\n// ============= Errors =============\n\nclass WebAuthNError extends WebAuthnError {}\n\n/** Thrown when WebAuthn is not supported on the device */\nclass UnsupportedError extends WebAuthNError {\n  override readonly name = 'WebAuthN.UnsupportedError'\n  constructor() {\n    super('WebAuthn is not supported on this device')\n  }\n}\n\n/** Thrown when required options are missing */\nclass MissingOptionsError extends WebAuthNError {\n  override readonly name = 'WebAuthN.MissingOptionsError'\n  constructor(operation: string) {\n    super(`${operation} options are required`)\n  }\n}\n\n/**\n * Checks if WebAuthn is supported on the current device.\n *\n * Platform requirements:\n * - iOS: iOS 15 or later (uses ASAuthorizationPlatformPublicKeyCredentialProvider)\n * - Android: API Level 28 or later\n *\n * @returns boolean indicating whether WebAuthn is supported\n */\nexport function isSupported(): boolean {\n  if (Platform.OS === 'android') {\n    return Platform.Version >= 28\n  }\n\n  if (Platform.OS === 'ios') {\n    return Number.parseInt(Platform.Version, 10) >= 15\n  }\n\n  return false\n}\n\n/**\n * Creates a new WebAuthn credential for the specified options.\n * This function is designed to be used with WebAuthnP256.createCredential as a custom createFn.\n *\n * On iOS, this uses ASAuthorizationPlatformPublicKeyCredentialProvider for credential creation.\n *\n * Note: While this function accepts undefined options to match WebAuthnP256.ts's type signature,\n * passing undefined will result in an error. This is because the underlying WebAuthn API\n * requires valid credential creation options. The only reason undefined is accepted in the type\n * signature is to maintain compatibility with WebAuthnP256.ts's createFn type.\n *\n * @example\n * ```ts\n * import { WebAuthnP256 } from 'ox'\n * import * as ExpoWebAuthN from '@porto/expo-webauthn'\n *\n * // Use as custom createFn in WebAuthnP256\n * const credential = await WebAuthnP256.createCredential({\n *   name: 'Example',\n *   createFn: Platform.OS !== 'web'\n *     ? (options) => ExpoWebAuthN.createCredential(options)\n *     : undefined\n * })\n * ```\n *\n * @param options - The credential creation options\n * @returns A Promise that resolves with the created credential\n * @throws {MissingOptionsError} When options is undefined\n */\nexport async function createCredential(\n  options: createCredential.Options,\n): Promise<createCredential.ReturnType> {\n  logger.debug('[WebAuthN:createCredential] Starting credential creation:', {\n    hasOptions: !!options,\n    hasPublicKey: !!options?.publicKey,\n    rpId: options?.publicKey?.rp?.id,\n  })\n\n  if (!options) {\n    logger.error('[WebAuthN:createCredential] No options provided')\n    throw new MissingOptionsError('Credential creation')\n  }\n\n  if (!isSupported()) {\n    throw new UnsupportedError()\n  }\n\n  logger.debug('[WebAuthN:createCredential] Creating native options')\n  const nativeOptions = credential.create(options)\n  logger.debug('[WebAuthN:createCredential] Native options created:', {\n    hasRp: !!(nativeOptions as WebAuthnCredentialCreationOptions).publicKey?.rp,\n    rpId: (nativeOptions as WebAuthnCredentialCreationOptions).publicKey?.rp\n      ?.id,\n    hasUser: !!(nativeOptions as WebAuthnCredentialCreationOptions).publicKey\n      ?.user,\n    authenticatorSelection: (nativeOptions as WebAuthnCredentialCreationOptions)\n      .publicKey?.authenticatorSelection,\n    timeout: (nativeOptions as WebAuthnCredentialCreationOptions).publicKey\n      ?.timeout,\n  })\n\n  logger.debug('[WebAuthN:createCredential] Calling native createCredential')\n  const nativeResponse = await ExpoWebAuthN.createCredential(nativeOptions)\n  logger.debug(\n    '[WebAuthN:createCredential] Native createCredential returned:',\n    {\n      success: !!nativeResponse,\n      type: nativeResponse?.type,\n      hasId: !!nativeResponse?.id,\n      hasResponse: !!nativeResponse?.response,\n    },\n  )\n\n  // TODO: add zod validation or something here.\n  const nativeCredential = nativeResponse as credential.parse.Input\n  logger.debug('[WebAuthN:createCredential] Credential parsed:', {\n    type: nativeCredential.type,\n    hasResponse: !!nativeCredential.response,\n    hasAttestationObject: !!nativeCredential.response.attestationObject,\n    hasClientData: !!nativeCredential.response.clientDataJSON,\n  })\n\n  return credential.parse(nativeResponse)\n}\n\nexport declare namespace createCredential {\n  type Options = WebAuthnCredentialCreationOptions | undefined\n  type ReturnType = PublicKeyCredential & {\n    response: AuthenticatorAttestationResponse\n  }\n  type ErrorType =\n    | MissingOptionsError\n    | UnsupportedError\n    | credential.create.ErrorType\n    | credential.parse.ErrorType\n    | credential.parseSPKIFromAttestation.ErrorType\n}\n\n/**\n * Gets an existing WebAuthn credential using the specified options.\n * This function is designed to be used with WebAuthnP256.sign as a custom getFn.\n *\n * On iOS, this uses ASAuthorizationPlatformPublicKeyCredentialProvider for credential assertion.\n *\n * Note: While this function accepts undefined options to match WebAuthnP256.ts's type signature,\n * passing undefined will result in an error. This is because the underlying WebAuthn API\n * requires valid credential request options. The only reason undefined is accepted in the type\n * signature is to maintain compatibility with WebAuthnP256.ts's getFn type.\n *\n * @example\n * ```ts\n * import { WebAuthnP256 } from 'ox'\n * import * as ExpoWebAuthN from '@porto/expo-webauthn'\n *\n * // Use as custom getFn in WebAuthnP256\n * const { metadata, signature } = await WebAuthnP256.sign({\n *   challenge: '0xdeadbeef',\n *   getFn: Platform.OS !== 'web'\n *     ? (options) => ExpoWebAuthN.getCredential(options)\n *     : undefined\n * })\n * ```\n *\n * @param options - The credential request options\n * @returns A Promise that resolves with the credential assertion\n * @throws {UnsupportedError} When WebAuthn is not supported on the device\n * @throws {MissingOptionsError} When options is undefined\n */\nexport async function getCredential(\n  options: getCredential.Options,\n): Promise<getCredential.ReturnType> {\n  if (!isSupported()) {\n    throw new UnsupportedError()\n  }\n\n  if (!options) {\n    logger.error('[WebAuthN:getCredential] No options provided')\n    throw new MissingOptionsError('Credential request')\n  }\n\n  logger.debug('Getting credential with options:', {\n    options,\n    publicKey: options.publicKey,\n    challenge:\n      options.publicKey?.challenge &&\n      bufferSourceToBase64(options.publicKey.challenge),\n    rpId: options.publicKey?.rpId,\n    allowCredentials: options.publicKey?.allowCredentials?.map((cred) => ({\n      id: bufferSourceToBase64(cred.id),\n      type: cred.type,\n      transports: cred.transports,\n    })),\n    userVerification: options.publicKey?.userVerification,\n    timeout: options.publicKey?.timeout,\n  })\n\n  const nativeOptions = assertion.create(options)\n  // TODO: add zod validation or something here.\n  const nativeResponse = (await ExpoWebAuthN.getCredential(\n    nativeOptions,\n  )) as assertion.parse.Input\n\n  logger.debug('Received native response:', {\n    response: nativeResponse,\n    responseType: typeof nativeResponse,\n    hasAuthenticatorData: 'authenticatorData' in nativeResponse.response,\n    hasClientDataJSON: 'clientDataJSON' in nativeResponse.response,\n    hasSignature: 'signature' in nativeResponse.response,\n  })\n\n  return assertion.parse(nativeResponse)\n}\n\nexport declare namespace getCredential {\n  type Options = WebAuthnCredentialRequestOptions | undefined\n  type ReturnType = PublicKeyCredential & {\n    response: AuthenticatorAssertionResponse\n  }\n  type ErrorType =\n    | MissingOptionsError\n    | UnsupportedError\n    | assertion.create.ErrorType\n    | assertion.parse.ErrorType\n}\n"]}